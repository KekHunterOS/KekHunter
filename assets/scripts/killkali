#!/system/bin/sh

SCRIPT_PATH=$(readlink -f $0)
. ${SCRIPT_PATH%/*}/bootkali_log
. ${SCRIPT_PATH%/*}/bootkali_env

#################################
#### DEFINE GLOBAL VARIABLES ####
#################################

## Validate busybox path.
if [ -z "$BUSYBOX" ]; then
    bklog "[-] No busybox_nh is installed or busybox is not granted execute permission, if you did have it installed, please symlink it to /system/bin and grant it the permission."
    exit 1
fi

## Validate kali Chroot path.
if [ ! -d "$MNT" ]; then
    bklog "[-] \"$MNT\" directory not exist!"
    bklog "[!] Click the button [INSTALL KALI CHROOT] down below now!"
    exit 2
fi
if [ -z "$MNT" ]; then
    bklog "[-] The \$MNT variable is not defined, please run nethunter app first."
    exit 2
fi

isAllunmounted=0

##########################
#### DEFINE FUNCTIONS ####
##########################

########## Kill all running kali services and processes ##########
f_kill_pids() {
    bklog "[!] Killing all running kali services .."
    local lsof_full=$($BUSYBOX lsof | awk '{print $1}' | grep -c '^lsof')
    if [ "${lsof_full}" -eq 0 ]; then
        local pids=$($BUSYBOX lsof | grep "$MNT" | awk '{print $1}' | uniq)
    else
        local pids=$($BUSYBOX lsof | grep "$MNT" | awk '{print $2}' | uniq)
    fi
    if [ -n "${pids}" ]; then
        kill -9 ${pids} 2> /dev/null
        return $?
    fi
    return 0
}

########## Restore the setup ##########
f_restore_setup() {
    bklog "[!] Restoring the setup to previous state.."

    ## set shmmax to 128mb to free memory ##
    $BUSYBOX sysctl -w kernel.shmmax=134217728

    ## remove all the remaining chroot vnc session pid and log files..##
    bklog "[!] Removing all the remaining chroot vnc session pid and log files.."
    rm -rf $MNT/tmp/.X11* $MNT/tmp/.X*-lock $MNT/root/.vnc/*.pid $MNT/root/.vnc/*.log > /dev/null 2>&1
}

########## umount the fs one by one ##########
f_umount_fs() {
    if $BUSYBOX mountpoint -q $MNT/$1; then
        if $BUSYBOX umount -f $MNT/$1; then
            bklog "[+] umounted $MNT/$1"
            if [ ! "$1" = "dev/pts" -a ! "$1" = "dev/shm" ]; then
                if rm -rf $MNT/$1; then
                    bklog "[+] removed $MNT/$1"
                else
                    bklog "[-] Failed to remove $MNT/$1"
                    isAllunmounted=1
                fi
            fi
        else
            bklog "[-] failed to umounted $MNT/$1"
            isAllunmounted=1
        fi
    else
        if [ -d $MNT/$1 ]; then
            bklog "[+] $MNT/$1 is unmounted already."
            if rm -rf $MNT/$1; then
                bklog "[+] removed $MNT/$1"
            else
                bklog "[-] Failed to remove $MNT/$1"
                isAllunmounted=1
            fi
        fi
    fi

}

########## umount if chroot directory is NOT a mountpoint(directory method) ##########
f_dir_umount() {
    $BUSYBOX sync
    f_kill_pids
    f_restore_setup
    bklog "[!] Removing all fs mounts.."
    FS=(dev/pts dev/shm dev proc sys system sdcard)
    for i in "${FS[@]}"; do
        f_umount_fs "$i"
    done
}

########## Check if chroot directory is a mountpoint ##########
f_is_mntpoint() {
    if [ -d "$MNT" ]; then
        $BUSYBOX mountpoint -q "$MNT" && return 0
        return 1
    fi
}


###################
#### MAIN PART ####
###################

f_is_mntpoint
res=$?
case $res in
1)
    bklog "[!] $MNT is NOT a mountpoint"
    f_dir_umount
    ;;
*)
    bklog "[!] $MNT directory is not existed!!! Aborting.."
    exit 1
esac

if [ -z "$(cat /proc/mounts | grep $MNT)" ]; then
    bklog "[+] All done."
    isAllunmounted=0
else
    bklog "[-] there are still mounted points not unmounted yet."
    bklog "[-] Try run this script again and see if they can be unmounted now."
    isAllunmounted=1
fi

return $isAllunmounted

